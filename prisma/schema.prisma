generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Players {
  name String @id

  batting  Batting[]
  bowling  Bowling[]
  fielding Fielding[]

  statsBatter Stats[] @relation("stats_batter")
  statsBowler Stats[] @relation("stats_bowler")

  @@index([name])
  @@map("players")
}

model Dates {
  date  DateTime @id @db.Date
  title String

  batting  Batting[]
  bowling  Bowling[]
  fielding Fielding[]
  stats    Stats[]

  @@index([date])
  @@map("dates")
}

model Batting {
  id          Int      @id @default(autoincrement()) @db.SmallInt
  player      String   @db.Text
  date        DateTime @db.Date
  matches     Int      @db.SmallInt
  innings     Int      @db.SmallInt
  runs        Int      @db.SmallInt
  balls       Int      @db.SmallInt
  not_outs    Int      @db.SmallInt
  strike_rate Int      @db.SmallInt
  average     Int      @db.SmallInt
  fours       Int      @db.SmallInt
  sixes       Int      @db.SmallInt
  ducks       Int      @db.SmallInt

  datesModel   Dates   @relation(fields: [date], references: [date], onDelete: Cascade)
  playersModel Players @relation(fields: [player], references: [name], onDelete: Cascade)

  @@unique([player, date])
  @@index([player, date])
  @@map("batting")
}

model Bowling {
  id       Int      @id @default(autoincrement()) @db.SmallInt
  player   String   @db.Text
  date     DateTime @db.Date
  matches  Int      @db.SmallInt
  innings  Int      @db.SmallInt
  overs    Float    @db.Real
  runs     Int      @db.SmallInt
  wickets  Int      @db.SmallInt
  dots     Int      @db.SmallInt
  wides    Int      @db.SmallInt
  no_balls Int      @db.SmallInt

  datesModel   Dates   @relation(fields: [date], references: [date], onDelete: Cascade)
  playersModel Players @relation(fields: [player], references: [name], onDelete: Cascade)

  @@unique([player, date])
  @@index([player, date])
  @@map("bowling")
}

model Fielding {
  id        Int      @id @default(autoincrement()) @db.SmallInt
  player    String   @db.Text
  date      DateTime @db.Date
  matches   Int      @db.SmallInt
  catches   Int      @db.SmallInt
  run_outs  Int      @db.SmallInt
  stumpings Int      @db.SmallInt

  datesModel   Dates   @relation(fields: [date], references: [date], onDelete: Cascade)
  playersModel Players @relation(fields: [player], references: [name], onDelete: Cascade)

  @@unique([player, date])
  @@index([player, date])
  @@map("fielding")
}

model Stats {
  id     Int      @id @default(autoincrement()) @db.SmallInt
  batter String
  bowler String
  score  Int      @db.SmallInt
  wicket Boolean  @default(false)
  date   DateTime @db.Date

  playerBatter Players @relation("stats_batter", fields: [batter], references: [name], onDelete: Cascade)
  playerBowler Players @relation("stats_bowler", fields: [bowler], references: [name], onDelete: Cascade)
  datesModel   Dates   @relation(fields: [date], references: [date], onDelete: Cascade)

  @@index([batter, bowler, wicket, date])
  @@map("stats")
}
